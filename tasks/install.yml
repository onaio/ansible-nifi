---
- name: Create NiFi source directory
  file:
    path: "{{ nifi_base_dir }}"
    state: directory
    mode: 0755

- name: Create nifi group
  group:
    name: "{{ nifi_group }}"

- name: Create nifi user
  user:
    name: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Download binaries
  get_url:
    url: http://archive.apache.org/dist/nifi/{{ nifi_version }}/{{ nifi_archive_name }}
    checksum: "{{ nifi_checksum[nifi_version] }}"
    dest: "{{ nifi_base_dir }}/{{ nifi_archive_name }}"
    force: false

- name: Unarchive NiFi distribution
  unarchive:
    src: "{{ nifi_base_dir }}/{{ nifi_archive_name }}"
    dest: "{{ nifi_base_dir }}"
    copy: false
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"

- name: Ensure nifi files are world-readable
  file:
    path: "{{ nifi_base_dir }}"
    state: directory
    mode: "a+rX"
    recurse: true

- name: Make sure the NiFi distribution dir has right permissions
  file:
    path: "{{ nifi_base_dir }}/nifi-{{ nifi_version }}"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    recurse: true

- name: Download snappy-java
  get_url:
    url: https://ona-bdw.s3.eu-west-1.amazonaws.com/snappy-java/snappy-java-1.1.8.4.jar
    checksum: "sha512:6d928942d47c285ba0f67c563db70abe91a1da88f42f2bc49f2698c17272f02a6bfc072a69cbce538bd0ee8877169d684e8747464441874326edd25a9268403d"
    dest: "{{ nifi_base_dir }}/nifi-{{ nifi_version }}/lib/"
  when: ansible_architecture == 'aarch64'

- name: Ensure nifi symlink
  file:
    src: "{{ nifi_base_dir }}/nifi-{{ nifi_version }}"
    dest: "{{ nifi_home }}"
    state: link
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    follow: false
  notify:
    - restart nifi

- include: ./install_toolkit.yml
  when: nifi_install_toolkit | bool

- name: Create nifi systemd service
  template:
    src: nifi.service.j2
    dest: "{{ nifi_service }}"
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemctl
    - restart nifi
  when: ansible_distribution == "Ubuntu" or (ansible_distribution == "CentOS" and ansible_distribution_major_version >= "7")
  tags: [ service ]

- name: Create nifi init.d service
  template:
    src: nifi-startup.sh.j2
    dest: /etc/init.d/nifi
    owner: root
    group: root
    mode: 0755
  when: ansible_distribution == "Amazon" or (ansible_distribution == "CentOS" and ansible_distribution_major_version < "7")
  tags: [ service ]

- name: Ensure nifi-required directories exist and are world-readable
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: 0755
  with_items:
    - "{{ nifi_conf_dir }}"
    - "{{ nifi_log_dir }}"
    - "{{ nifi_pid_dir }}"
    - "{{ nifi_nar_dir }}"
    - "{{ nifi_work_dir }}"
    - "{{ nifi_etc_dir }}"
    - "{{ nifi_database_repository }}"
    - "{{ nifi_flowfile_repository }}"
    - "{{ nifi_run_dir }}"

- name: Ensure nifi content repo directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: 0755
  with_items: "{{ nifi_content_repositories }}"

- name: Ensure nifi provenance repo directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: 0755
  with_items: "{{ nifi_provenance_repositories }}"

- name: Ensure zookeeper data directory exists
  file:
    path: "{{ nifi_zookeeper_dir }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: 0755
  when: nifi_state_management_embedded_zookeeper_start

- name: Add myid file for embedded zookeeper
  template:
    src: "myid.j2"
    dest: "{{ nifi_zookeeper_dir }}/myid"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: 0644
  when: nifi_state_management_embedded_zookeeper_start

- name: Ensure nifi extra directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: 0755
  with_items: "{{ nifi_extra_dirs | default([]) }}"

- include: ./install_backup_restore.yml
  when: nifi_backup_enabled | bool
