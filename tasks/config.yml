---
- name: copy nifi configs
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: "0644"
  with_items:
    - { src: "config/nifi.properties.j2", dest: "{{ nifi_conf_dir }}/nifi.properties" }
    - { src: 'extra-args.properties.j2', dest: "{{ nifi_conf_dir }}/extra-args.properties" }
  notify:
    - restart nifi
  tags: [ deploy, prop, props ]

- name: generate server certificate
  command: keytool -genkeypair -noprompt -alias {{ nifi_server_alias }} -keyalg rsa -keypass {{ nifi_key_pass }} -storepass {{ nifi_keystore_pass }} -keystore {{ nifi_keystore_path }} -dname "{{ nifi_keytool_dname }}"  # noqa 204
  when: nifi_needs_keys
  ignore_errors: yes  # this will fail if the key exists, ignore that failure
  tags: [ config, security ]

- name: export server certificate
  command: keytool -export -alias {{ nifi_server_alias }} -storepass {{ nifi_keystore_pass }} -file {{ nifi_conf_dir }}/server.cer -keystore {{ nifi_keystore_path }}  # noqa 204
  when: nifi_needs_keys
  tags: [ config, security ]

- name: create trust store
  command: keytool -import -noprompt -trustcacerts -alias {{ nifi_server_alias }} -file {{ nifi_conf_dir }}/server.cer -keystore {{ nifi_truststore_path }} -keypass {{ nifi_key_pass }} -storepass {{ nifi_truststore_pass }}  # noqa 204
  when: nifi_needs_keys
  ignore_errors: yes  # this will fail if already imported, ignore that failure
  tags: [ config, security ]

- name: copy user certificate
  copy:
    src: "{{ nifi_ca_cert_local_path }}"
    dest: "{{ nifi_ca_cert_remote_path }}"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
  when: nifi_is_secure

- name: import CA certificate
  command: keytool -importcert -noprompt -file {{ nifi_ca_cert_remote_path }} -alias RSA -keystore {{ nifi_conf_dir }}/cacerts.jks -storepass {{ nifi_truststore_pass }}  # noqa 204
  when: nifi_is_secure
  ignore_errors: yes  # this will fail if already imported, ignore that failure
  tags: [ config, security ]

- name: Ensure NiFi owns key files
  file:
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    path: "{{ item }}"
  tags: [ config, security ]
  with_items:
    - "{{ nifi_keystore_path }}"
    - "{{ nifi_truststore_path }}"
  when: nifi_needs_keys

- name: copy nifi configs
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: "0644"
  with_items:
    - { src: "config/authorizers.xml.j2", dest: "{{ nifi_conf_dir }}/authorizers.xml" }
    - { src: "config/bootstrap.conf.j2", dest: "{{ nifi_conf_dir }}/bootstrap.conf" }
    - { src: "config/bootstrap-notification-services.xml.j2", dest: "{{ nifi_conf_dir }}/bootstrap-notification-services.xml" }
    - { src: "config/logback.xml.j2", dest: "{{ nifi_conf_dir }}/logback.xml" }
    - { src: "config/login-identity-providers.xml.j2", dest: "{{ nifi_conf_dir }}/login-identity-providers.xml" }
    - { src: "config/state-management.xml.j2", dest: "{{ nifi_conf_dir }}/state-management.xml" }
    - { src: "config/zookeeper.properties.j2", dest: "{{ nifi_conf_dir }}/zookeeper.properties" }
  notify:
    - restart nifi
  tags: [ config ]

- name: copy nifi scripts
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    mode: 0755
  with_items:
    - { src: "config/nifi.sh.j2", dest: "{{ nifi_home }}/bin/nifi.sh" }
    - { src: "config/nifi-env.sh.j2", dest: "{{ nifi_home }}/bin/nifi-env.sh" }

- name: Create file system
  filesystem:
    fstype: "{{ nifi_volume_fs_type }}"
    dev: "{{ nifi_volume_device }}"
  when: nifi_mount_volume

- name: Ensure nifi volume fstab record exists
  mount:
    path: "{{ nifi_volume_mount_point }}"
    src: "{{ nifi_volume_device }}"
    fstype: "{{ nifi_volume_fs_type }}"
    state: mounted
    opts: "{{ nifi_volume_mount_opts }}"
  when: nifi_mount_volume

- name: Have NiFi own the volume directory
  file:
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    path: "{{ nifi_volume_mount_point }}"
  when: nifi_mount_volume

- name: Ensure NiFi is running
  service: name=nifi state=started enabled=yes

- name: Ensure NiFi is restarted
  service: name=nifi state=restarted
  when: nifi_force_restart
